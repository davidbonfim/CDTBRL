# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "name_"}, {"type": "string", "name": "symbol_"}, {"type": "uint64", "name": "decimals_"}, {"type": "uint64", "name": "cap_"}, {"type": "address", "name": "reserve_addr"}], "name": "create_asa", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id_"}, {"type": "address", "name": "reserve_addr_"}], "name": "set_asset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "to"}, {"type": "uint64", "name": "amount"}], "name": "mint", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}], "name": "burn", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "account"}, {"type": "uint64", "name": "amount"}], "name": "burn_from", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "to"}, {"type": "uint64", "name": "amount"}], "name": "transfer", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "from_"}, {"type": "address", "name": "to"}, {"type": "uint64", "name": "amount"}], "name": "transfer_from", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "spender"}, {"type": "uint64", "name": "amount"}], "name": "approve", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "owner"}, {"type": "address", "name": "spender"}], "name": "allowance", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "account"}], "name": "balance_of", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "account"}], "name": "add_minter", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "account"}], "name": "remove_minter", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "account"}], "name": "is_minter", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_total_supply", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_cap", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "reserve_addr_"}], "name": "set_reserve", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "AlgoCdtStable", "state": {"keys": {"box": {}, "global": {"asset_id": {"key": "YXNzZXRfaWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "name": {"key": "bmFtZQ==", "keyType": "AVMString", "valueType": "AVMString"}, "symbol": {"key": "c3ltYm9s", "keyType": "AVMString", "valueType": "AVMString"}, "decimals": {"key": "ZGVjaW1hbHM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_supply": {"key": "dG90YWxfc3VwcGx5", "keyType": "AVMString", "valueType": "AVMUint64"}, "cap": {"key": "Y2Fw", "keyType": "AVMString", "valueType": "AVMUint64"}, "reserve_addr": {"key": "cmVzZXJ2ZV9hZGRy", "keyType": "AVMString", "valueType": "address"}, "allowances": {"key": "YWxsb3dhbmNlcw==", "keyType": "AVMString", "valueType": "(address,(address,uint64)[])[]"}, "minters": {"key": "bWludGVycw==", "keyType": "AVMString", "valueType": "address[]"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 5, "ints": 4}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CyAEAAEgAiYJCmFsbG93YW5jZXMHbWludGVycwx0b3RhbF9zdXBwbHkMcmVzZXJ2ZV9hZGRyCGFzc2V0X2lkBBUffHUCAAADY2FwAgAiMRhAABIoJwZnJwYxAFCAAgABXAApTGcxG0EAfzEZFEQxGESCEAQaLVsuBBJZ/uIESCC0eAR/HUPhBNgYzosEn+50GARYm8P6BO4dWLMERnvHpASKd3g5BO0w2WgESA33GgSibbHEBEaQk1UE9Fq4jgSxybqkNhoAjhAACwDSAQUBUQFjAZMBrgHmAgECHAI0AmECvgLXAuMC8AAxGRQxGBQQRCNDNhoBSSJZJQhLARUSRFcCADYaAkkiWSUISwEVEkRXAgA2GgNJFYEIEkQXNhoESRWBCBJEFzYaBUkVJBJEMQAyCRJEgARuYW1lSwVngAZzeW1ib2xLBGeACGRlY2ltYWxzSwNnJwdLAmcrSwFnKiJnsTIAMgpHAoAbaHR0cHM6Ly9jYXNhZG90b2tlbi5jb20uYnIvsieyLLIrTwKyKrIpTwSyJk8DsiUisiRPArIjTLIigQOyELIBs7Q8JwRLAWcWJwVMULAjQzYaAUkVgQgSRBc2GgJJFSQSRDEAMgkSRCcESwJnK0xnsTIAMgqyLEyyIYEDshCyAbMjQzYaAUkVJBJENhoCSRWBCBJEFzEAiAT1RCIqZURLAQgiJwdlREsBD0QqTGexMgAiJwRlRCIrZURPBLIUshNPArISshGBBLIQsgGzI0M2GgFJFYEIEkQXMQBMiAGiI0M2GgFJFSQSRDYaAkkVgQgSRBdLATEAiAPNSUsCD0QxAExLAglLA04CiAHDiAFyI0M2GgFJFSQSRDYaAkkVgQgSRBcxAE4CiAGEI0M2GgFJFSQSRDYaAkkVJBJENhoDSRWBCBJEF0sCMQCIA3pJSwIPRDEATEsCCUsETgKIAXCIAUwjQzYaAUkVJBJENhoCSRWBCBJEFzEATgKIAVIjQzYaAUkVJBJENhoCSRUkEkSIAzUWJwVMULAjQzYaARUkEkSADBUffHUAAAAAAAAAALAjQzYaAUcCFSQSRDEAiAPPRIgDy0AAFiIpZURJSwJQTCJZIwgWVwYCXAApTGcjQyI2GgFHAhUkEkQxAIgDoUQxABNEJwYiKWVMSU8CRCJZIklLAgxBAC9LAlcCAEsBJAskWElFB0sFE0EAE0sDSUsHUEwiWSMIFlcGAlwARQRJIwhFAUL/yilLBGcjQzYaAUkVJBJEiANIgAEAIk8CVCcFTFCwI0MiKmVEFicFTFCwI0MiJwdlRBYnBUxQsCNDNhoBSRUkEkQxADIJEkQrTGcjQ4oCACIqZUSL/wkqTGexMgAiJwRlRCIrZUSyFIv+shOL/7ISshGBBLIQsgGziYoDALEyACInBGVEi/6yFIv9shOL/7ISshGBBLIQsgGziYoDACJHA4AARwuL/YgCK0kiTCJZIosTixIMQQAvixBXAgCLE4EoC0mMBYEoWFcAIIv+EkEBuYv/Fov+TFCLBSUIixBMTwJdjBAjjBGLEUAAGov/Fov+TFCLEElPAlBMIlkjCBZXBgJcAIwQIihlRCJZjAQijBOLE4sEDEEA2CIoZURJVwIATCJZixNJJQtJjAZLA0xZTCMISYwHTwJLAQlLAxVPAiULSYwISwRMWU8CTVJXACCL/RJBAJSL/ScIUIsQUCIoZURJIlmLE0lOAw1ESVEAAkmMAxdMVwIASYsGWUsBiwhJTgZZSwIVSwRPBgkjCUsBTwNPAk1JSwMJjA1LBhWMDEsDIk8EUk8GUE8DTwJPA1JQjAIlC4wPjAuLC4sPDEEAIIsCSYsLSU4DWYsMCIsNCRZXBgJLAkxdjAIlCIwLQv/YiwOLAlAoTGeJiweME0L/ICIoZUSL/ScIUIsQUEsBIllJTgOMCUxXAgCMAIACAAJMUIwCgACMASULjA4ijAuLC4sODEEAG4sAiwtJTgJZJQgWVwYCiwFMUIwBJQiMC0L/3YsAFYwKIowLiwslDEEAHIsCiwtJTgJZiwoIFlcGAosBTFCMASUIjAtC/92LCSMIFlcGAosBUIsAiw6LClJQiwJXAgBQKExniYsTIwiME0L+HYoCASKL/ogAOUkiWSKLA4sCDEEAKYsBVwIAiwOBKAuBKFhJjABXACCL/xJBAAeLACRbjACJiwMjCIwDQv/PIowAiYoBAYAASSIoZUQiWSKLA4sCDEEAbCIoZURJVwIATCJZiwNJJQtJjABLA0xZTCMISU4ETwJLAQlLAxVPAiULSYwBSwRMWU8CTVJXACCL/xJBACoiKGVESVcCAEwiWUsBiwBZTE8DCUsCFUsDiwFZTwJNUkkkWUsBFVKMAImMA0L/jCcGjACJigEBIillTElPAkQiWSKLAosBDEEAHosAVwIAiwIkCyRYi/8SQQAEI4wAiYsCIwiMAkL/2iKMAIk=", "clear": "C4EBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [616], "errorMessage": "Burn amount exceeds allowance"}, {"pc": [516, 810, 856], "errorMessage": "Caller is not a minter"}, {"pc": [860], "errorMessage": "Cannot remove self"}, {"pc": [532], "errorMessage": "Cap exceeded"}, {"pc": [109], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [240], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [308], "errorMessage": "Only deployer can create ASA"}, {"pc": [465], "errorMessage": "Only deployer can set asset"}, {"pc": [997], "errorMessage": "Only deployer can set reserve"}, {"pc": [699], "errorMessage": "Transfer amount exceeds allowance"}, {"pc": [1191, 1210, 1279, 1426, 1660, 1675, 1736], "errorMessage": "check self.allowances exists"}, {"pc": [543, 1023, 1058], "errorMessage": "check self.asset_id exists"}, {"pc": [528, 975], "errorMessage": "check self.cap exists"}, {"pc": [820, 870, 1795], "errorMessage": "check self.minters exists"}, {"pc": [547, 1027], "errorMessage": "check self.reserve_addr exists"}, {"pc": [520, 962, 1009], "errorMessage": "check self.total_supply exists"}, {"pc": [891, 1125, 1151, 1240, 1289, 1618, 1705, 1752, 1817], "errorMessage": "index access is out of bounds"}, {"pc": [248, 264, 872, 1100, 1193, 1217, 1282, 1596, 1662, 1682, 1743, 1797], "errorMessage": "invalid array length header"}, {"pc": [255, 271], "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"}, {"pc": [302, 459, 500, 594, 642, 669, 677, 725, 752, 760, 778, 804, 850, 941, 991], "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"}, {"pc": [283, 293, 450, 509, 577, 603, 651, 686, 734], "errorMessage": "invalid number of bytes for arc4.uint64"}, {"pc": [91, 824, 906, 1174], "errorMessage": "max array length exceeded"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateAsaArgs:
    """Dataclass for create_asa arguments"""
    name_: str
    symbol_: str
    decimals_: int
    cap_: int
    reserve_addr: str

    @property
    def abi_method_signature(self) -> str:
        return "create_asa(string,string,uint64,uint64,address)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetAssetArgs:
    """Dataclass for set_asset arguments"""
    asset_id_: int
    reserve_addr_: str

    @property
    def abi_method_signature(self) -> str:
        return "set_asset(uint64,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintArgs:
    """Dataclass for mint arguments"""
    to: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "mint(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BurnArgs:
    """Dataclass for burn arguments"""
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "burn(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BurnFromArgs:
    """Dataclass for burn_from arguments"""
    account: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "burn_from(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferArgs:
    """Dataclass for transfer arguments"""
    to: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "transfer(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferFromArgs:
    """Dataclass for transfer_from arguments"""
    from_: str
    to: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "transfer_from(address,address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ApproveArgs:
    """Dataclass for approve arguments"""
    spender: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "approve(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AllowanceArgs:
    """Dataclass for allowance arguments"""
    owner: str
    spender: str

    @property
    def abi_method_signature(self) -> str:
        return "allowance(address,address)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BalanceOfArgs:
    """Dataclass for balance_of arguments"""
    account: str

    @property
    def abi_method_signature(self) -> str:
        return "balance_of(address)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddMinterArgs:
    """Dataclass for add_minter arguments"""
    account: str

    @property
    def abi_method_signature(self) -> str:
        return "add_minter(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RemoveMinterArgs:
    """Dataclass for remove_minter arguments"""
    account: str

    @property
    def abi_method_signature(self) -> str:
        return "remove_minter(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class IsMinterArgs:
    """Dataclass for is_minter arguments"""
    account: str

    @property
    def abi_method_signature(self) -> str:
        return "is_minter(address)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetReserveArgs:
    """Dataclass for set_reserve arguments"""
    reserve_addr_: str

    @property
    def abi_method_signature(self) -> str:
        return "set_reserve(address)void"


class AlgoCdtStableParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_asa(
        self,
        args: tuple[str, str, int, int, str] | CreateAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_asa(string,string,uint64,uint64,address)uint64",
            "args": method_args,
        }))

    def set_asset(
        self,
        args: tuple[int, str] | SetAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset(uint64,address)void",
            "args": method_args,
        }))

    def mint(
        self,
        args: tuple[str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(address,uint64)void",
            "args": method_args,
        }))

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn(uint64)void",
            "args": method_args,
        }))

    def burn_from(
        self,
        args: tuple[str, int] | BurnFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn_from(address,uint64)void",
            "args": method_args,
        }))

    def transfer(
        self,
        args: tuple[str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(address,uint64)void",
            "args": method_args,
        }))

    def transfer_from(
        self,
        args: tuple[str, str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_from(address,address,uint64)void",
            "args": method_args,
        }))

    def approve(
        self,
        args: tuple[str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve(address,uint64)void",
            "args": method_args,
        }))

    def allowance(
        self,
        args: tuple[str, str] | AllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "allowance(address,address)uint64",
            "args": method_args,
        }))

    def balance_of(
        self,
        args: tuple[str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "balance_of(address)uint64",
            "args": method_args,
        }))

    def add_minter(
        self,
        args: tuple[str] | AddMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_minter(address)void",
            "args": method_args,
        }))

    def remove_minter(
        self,
        args: tuple[str] | RemoveMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_minter(address)void",
            "args": method_args,
        }))

    def is_minter(
        self,
        args: tuple[str] | IsMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_minter(address)bool",
            "args": method_args,
        }))

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }))

    def get_cap(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_cap()uint64",
        }))

    def set_reserve(
        self,
        args: tuple[str] | SetReserveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_reserve(address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class AlgoCdtStableCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_asa(
        self,
        args: tuple[str, str, int, int, str] | CreateAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_asa(string,string,uint64,uint64,address)uint64",
            "args": method_args,
        }))

    def set_asset(
        self,
        args: tuple[int, str] | SetAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset(uint64,address)void",
            "args": method_args,
        }))

    def mint(
        self,
        args: tuple[str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(address,uint64)void",
            "args": method_args,
        }))

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn(uint64)void",
            "args": method_args,
        }))

    def burn_from(
        self,
        args: tuple[str, int] | BurnFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn_from(address,uint64)void",
            "args": method_args,
        }))

    def transfer(
        self,
        args: tuple[str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(address,uint64)void",
            "args": method_args,
        }))

    def transfer_from(
        self,
        args: tuple[str, str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_from(address,address,uint64)void",
            "args": method_args,
        }))

    def approve(
        self,
        args: tuple[str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve(address,uint64)void",
            "args": method_args,
        }))

    def allowance(
        self,
        args: tuple[str, str] | AllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "allowance(address,address)uint64",
            "args": method_args,
        }))

    def balance_of(
        self,
        args: tuple[str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "balance_of(address)uint64",
            "args": method_args,
        }))

    def add_minter(
        self,
        args: tuple[str] | AddMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_minter(address)void",
            "args": method_args,
        }))

    def remove_minter(
        self,
        args: tuple[str] | RemoveMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_minter(address)void",
            "args": method_args,
        }))

    def is_minter(
        self,
        args: tuple[str] | IsMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_minter(address)bool",
            "args": method_args,
        }))

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }))

    def get_cap(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_cap()uint64",
        }))

    def set_reserve(
        self,
        args: tuple[str] | SetReserveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_reserve(address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class AlgoCdtStableSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_asa(
        self,
        args: tuple[str, str, int, int, str] | CreateAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_asa(string,string,uint64,uint64,address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_asset(
        self,
        args: tuple[int, str] | SetAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset(uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mint(
        self,
        args: tuple[str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def burn_from(
        self,
        args: tuple[str, int] | BurnFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "burn_from(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def transfer(
        self,
        args: tuple[str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def transfer_from(
        self,
        args: tuple[str, str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer_from(address,address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def approve(
        self,
        args: tuple[str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def allowance(
        self,
        args: tuple[str, str] | AllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "allowance(address,address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def balance_of(
        self,
        args: tuple[str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "balance_of(address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def add_minter(
        self,
        args: tuple[str] | AddMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_minter(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def remove_minter(
        self,
        args: tuple[str] | RemoveMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_minter(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def is_minter(
        self,
        args: tuple[str] | IsMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_minter(address)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_total_supply()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_cap(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_cap()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_reserve(
        self,
        args: tuple[str] | SetReserveArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_reserve(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    asset_id: int
    name: str
    symbol: str
    decimals: int
    total_supply: int
    cap: int
    reserve_addr: str
    allowances: list[tuple[str, list[tuple[str, int]]]]
    minters: list[str]

class AlgoCdtStableState:
    """Methods to access state for the current AlgoCdtStable app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def asset_id(self) -> int:
        """Get the current value of the asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def name(self) -> str:
        """Get the current value of the name key in global_state state"""
        value = self.app_client.state.global_state.get_value("name")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def symbol(self) -> str:
        """Get the current value of the symbol key in global_state state"""
        value = self.app_client.state.global_state.get_value("symbol")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def decimals(self) -> int:
        """Get the current value of the decimals key in global_state state"""
        value = self.app_client.state.global_state.get_value("decimals")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_supply(self) -> int:
        """Get the current value of the total_supply key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_supply")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def cap(self) -> int:
        """Get the current value of the cap key in global_state state"""
        value = self.app_client.state.global_state.get_value("cap")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def reserve_addr(self) -> str:
        """Get the current value of the reserve_addr key in global_state state"""
        value = self.app_client.state.global_state.get_value("reserve_addr")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def allowances(self) -> list[tuple[str, list[tuple[str, int]]]]:
        """Get the current value of the allowances key in global_state state"""
        value = self.app_client.state.global_state.get_value("allowances")
        if isinstance(value, dict) and "(address,(address,uint64)[])[]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["(address,(address,uint64)[])[]"], value)  # type: ignore
        return typing.cast(list[tuple[str, list[tuple[str, int]]]], value)

    @property
    def minters(self) -> list[str]:
        """Get the current value of the minters key in global_state state"""
        value = self.app_client.state.global_state.get_value("minters")
        if isinstance(value, dict) and "address[]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address[]"], value)  # type: ignore
        return typing.cast(list[str], value)

class AlgoCdtStableClient:
    """Client for interacting with AlgoCdtStable smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = AlgoCdtStableParams(self.app_client)
        self.create_transaction = AlgoCdtStableCreateTransactionParams(self.app_client)
        self.send = AlgoCdtStableSend(self.app_client)
        self.state = AlgoCdtStableState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "AlgoCdtStableClient":
        return AlgoCdtStableClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AlgoCdtStableClient":
        return AlgoCdtStableClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "AlgoCdtStableClient":
        return AlgoCdtStableClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "AlgoCdtStableComposer":
        return AlgoCdtStableComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_asa(string,string,uint64,uint64,address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_asset(uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["burn(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["burn_from(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer_from(address,address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["approve(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["allowance(address,address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["balance_of(address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["add_minter(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["remove_minter(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_minter(address)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_total_supply()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_cap()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_reserve(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class AlgoCdtStableBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating AlgoCdtStable contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class AlgoCdtStableFactory(algokit_utils.TypedAppFactoryProtocol[AlgoCdtStableBareCallCreateParams, None, None]):
    """Factory for deploying and managing AlgoCdtStableClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = AlgoCdtStableFactoryParams(self.app_factory)
        self.create_transaction = AlgoCdtStableFactoryCreateTransaction(self.app_factory)
        self.send = AlgoCdtStableFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: AlgoCdtStableBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[AlgoCdtStableClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return AlgoCdtStableClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AlgoCdtStableClient:
        """Get an app client by creator address and name"""
        return AlgoCdtStableClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> AlgoCdtStableClient:
        """Get an app client by app ID"""
        return AlgoCdtStableClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class AlgoCdtStableFactoryParams:
    """Parameters for creating transactions for AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AlgoCdtStableFactoryCreateParams(app_factory)
        self.update = AlgoCdtStableFactoryUpdateParams(app_factory)
        self.delete = AlgoCdtStableFactoryDeleteParams(app_factory)

class AlgoCdtStableFactoryCreateParams:
    """Parameters for 'create' operations of AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create_asa(
        self,
        args: tuple[str, str, int, int, str] | CreateAsaArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_asa(string,string,uint64,uint64,address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_asa(string,string,uint64,uint64,address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_asset(
        self,
        args: tuple[int, str] | SetAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_asset(uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_asset(uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint(
        self,
        args: tuple[str, int] | MintArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the burn(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "burn(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def burn_from(
        self,
        args: tuple[str, int] | BurnFromArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the burn_from(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "burn_from(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer(
        self,
        args: tuple[str, int] | TransferArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer_from(
        self,
        args: tuple[str, str, int] | TransferFromArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer_from(address,address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer_from(address,address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def approve(
        self,
        args: tuple[str, int] | ApproveArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the approve(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "approve(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def allowance(
        self,
        args: tuple[str, str] | AllowanceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the allowance(address,address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "allowance(address,address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def balance_of(
        self,
        args: tuple[str] | BalanceOfArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the balance_of(address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "balance_of(address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def add_minter(
        self,
        args: tuple[str] | AddMinterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the add_minter(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "add_minter(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def remove_minter(
        self,
        args: tuple[str] | RemoveMinterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the remove_minter(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "remove_minter(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def is_minter(
        self,
        args: tuple[str] | IsMinterArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_minter(address)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_minter(address)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_total_supply(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_total_supply()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_total_supply()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_cap(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_cap()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_cap()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def set_reserve(
        self,
        args: tuple[str] | SetReserveArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_reserve(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_reserve(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class AlgoCdtStableFactoryUpdateParams:
    """Parameters for 'update' operations of AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class AlgoCdtStableFactoryDeleteParams:
    """Parameters for 'delete' operations of AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class AlgoCdtStableFactoryCreateTransaction:
    """Create transactions for AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AlgoCdtStableFactoryCreateTransactionCreate(app_factory)


class AlgoCdtStableFactoryCreateTransactionCreate:
    """Create new instances of AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class AlgoCdtStableFactorySend:
    """Send calls to AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = AlgoCdtStableFactorySendCreate(app_factory)


class AlgoCdtStableFactorySendCreate:
    """Send create calls to AlgoCdtStable contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[AlgoCdtStableClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return AlgoCdtStableClient(result[0]), result[1]


class AlgoCdtStableComposer:
    """Composer for creating transaction groups for AlgoCdtStable contract calls"""

    def __init__(self, client: "AlgoCdtStableClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create_asa(
        self,
        args: tuple[str, str, int, int, str] | CreateAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_asa(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_asa(string,string,uint64,uint64,address)uint64", v
            )
        )
        return self

    def set_asset(
        self,
        args: tuple[int, str] | SetAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_asset(uint64,address)void", v
            )
        )
        return self

    def mint(
        self,
        args: tuple[str, int] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint(address,uint64)void", v
            )
        )
        return self

    def burn(
        self,
        args: tuple[int] | BurnArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.burn(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "burn(uint64)void", v
            )
        )
        return self

    def burn_from(
        self,
        args: tuple[str, int] | BurnFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.burn_from(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "burn_from(address,uint64)void", v
            )
        )
        return self

    def transfer(
        self,
        args: tuple[str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer(address,uint64)void", v
            )
        )
        return self

    def transfer_from(
        self,
        args: tuple[str, str, int] | TransferFromArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer_from(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer_from(address,address,uint64)void", v
            )
        )
        return self

    def approve(
        self,
        args: tuple[str, int] | ApproveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.approve(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "approve(address,uint64)void", v
            )
        )
        return self

    def allowance(
        self,
        args: tuple[str, str] | AllowanceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.allowance(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "allowance(address,address)uint64", v
            )
        )
        return self

    def balance_of(
        self,
        args: tuple[str] | BalanceOfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.balance_of(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "balance_of(address)uint64", v
            )
        )
        return self

    def add_minter(
        self,
        args: tuple[str] | AddMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_minter(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add_minter(address)void", v
            )
        )
        return self

    def remove_minter(
        self,
        args: tuple[str] | RemoveMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.remove_minter(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "remove_minter(address)void", v
            )
        )
        return self

    def is_minter(
        self,
        args: tuple[str] | IsMinterArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_minter(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_minter(address)bool", v
            )
        )
        return self

    def get_total_supply(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_total_supply(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_total_supply()uint64", v
            )
        )
        return self

    def get_cap(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_cap(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_cap()uint64", v
            )
        )
        return self

    def set_reserve(
        self,
        args: tuple[str] | SetReserveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_reserve(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_reserve(address)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "AlgoCdtStableComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "AlgoCdtStableComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
