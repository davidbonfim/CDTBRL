{
    "name": "AlgoCdtStable",
    "structs": {},
    "methods": [
        {
            "name": "create_asa",
            "args": [
                {
                    "type": "string",
                    "name": "name_"
                },
                {
                    "type": "string",
                    "name": "symbol_"
                },
                {
                    "type": "uint64",
                    "name": "decimals_"
                },
                {
                    "type": "uint64",
                    "name": "cap_"
                },
                {
                    "type": "address",
                    "name": "reserve_addr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id_"
                },
                {
                    "type": "address",
                    "name": "reserve_addr_"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "seed_reserve",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn_from",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer_from",
            "args": [
                {
                    "type": "address",
                    "name": "from_"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve",
            "args": [
                {
                    "type": "address",
                    "name": "spender"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowance",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "address",
                    "name": "spender"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "balance_of",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_minter",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_minter",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_minter",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_supply",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_cap",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_reserve",
            "args": [
                {
                    "type": "address",
                    "name": "reserve_addr_"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                },
                "symbol": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3ltYm9s"
                },
                "decimals": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVjaW1hbHM="
                },
                "total_supply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3VwcGx5"
                },
                "cap": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2Fw"
                },
                "reserve_addr": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cmVzZXJ2ZV9hZGRy"
                },
                "allowances": {
                    "keyType": "AVMString",
                    "valueType": "(address,(address,uint64)[])[]",
                    "key": "YWxsb3dhbmNlcw=="
                },
                "minters": {
                    "keyType": "AVMString",
                    "valueType": "address[]",
                    "key": "bWludGVycw=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        672
                    ],
                    "errorMessage": "Burn amount exceeds allowance"
                },
                {
                    "pc": [
                        572,
                        866,
                        912
                    ],
                    "errorMessage": "Caller is not a minter"
                },
                {
                    "pc": [
                        916
                    ],
                    "errorMessage": "Cannot remove self"
                },
                {
                    "pc": [
                        588
                    ],
                    "errorMessage": "Cap exceeded"
                },
                {
                    "pc": [
                        109
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        247
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        315
                    ],
                    "errorMessage": "Only deployer can create ASA"
                },
                {
                    "pc": [
                        515
                    ],
                    "errorMessage": "Only deployer can seed reserve"
                },
                {
                    "pc": [
                        472
                    ],
                    "errorMessage": "Only deployer can set asset"
                },
                {
                    "pc": [
                        1053
                    ],
                    "errorMessage": "Only deployer can set reserve"
                },
                {
                    "pc": [
                        755
                    ],
                    "errorMessage": "Transfer amount exceeds allowance"
                },
                {
                    "pc": [
                        1247,
                        1266,
                        1335,
                        1482,
                        1716,
                        1731,
                        1792
                    ],
                    "errorMessage": "check self.allowances exists"
                },
                {
                    "pc": [
                        523,
                        599,
                        1079,
                        1114
                    ],
                    "errorMessage": "check self.asset_id exists"
                },
                {
                    "pc": [
                        584,
                        1031
                    ],
                    "errorMessage": "check self.cap exists"
                },
                {
                    "pc": [
                        876,
                        926,
                        1851
                    ],
                    "errorMessage": "check self.minters exists"
                },
                {
                    "pc": [
                        529,
                        603,
                        1083
                    ],
                    "errorMessage": "check self.reserve_addr exists"
                },
                {
                    "pc": [
                        576,
                        1018,
                        1065
                    ],
                    "errorMessage": "check self.total_supply exists"
                },
                {
                    "pc": [
                        947,
                        1181,
                        1207,
                        1296,
                        1345,
                        1674,
                        1761,
                        1808,
                        1873
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        255,
                        271,
                        928,
                        1156,
                        1249,
                        1273,
                        1338,
                        1652,
                        1718,
                        1738,
                        1799,
                        1853
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        262,
                        278
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        309,
                        466,
                        556,
                        650,
                        698,
                        725,
                        733,
                        781,
                        808,
                        816,
                        834,
                        860,
                        906,
                        997,
                        1047
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        290,
                        300,
                        457,
                        508,
                        565,
                        633,
                        659,
                        707,
                        742,
                        790
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        91,
                        880,
                        962,
                        1230
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}