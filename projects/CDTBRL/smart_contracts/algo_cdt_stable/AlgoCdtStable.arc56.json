{
    "name": "AlgoCdtStable",
    "structs": {},
    "methods": [
        {
            "name": "create_asa",
            "args": [
                {
                    "type": "string",
                    "name": "name_"
                },
                {
                    "type": "string",
                    "name": "symbol_"
                },
                {
                    "type": "uint64",
                    "name": "decimals_"
                },
                {
                    "type": "uint64",
                    "name": "cap_"
                },
                {
                    "type": "address",
                    "name": "reserve_addr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id_"
                },
                {
                    "type": "address",
                    "name": "reserve_addr_"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn_from",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer_from",
            "args": [
                {
                    "type": "address",
                    "name": "from_"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve",
            "args": [
                {
                    "type": "address",
                    "name": "spender"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowance",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "address",
                    "name": "spender"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "balance_of",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_minter",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_minter",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_minter",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_supply",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_cap",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_reserve",
            "args": [
                {
                    "type": "address",
                    "name": "reserve_addr_"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                },
                "symbol": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c3ltYm9s"
                },
                "decimals": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVjaW1hbHM="
                },
                "total_supply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3VwcGx5"
                },
                "cap": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2Fw"
                },
                "reserve_addr": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cmVzZXJ2ZV9hZGRy"
                },
                "allowances": {
                    "keyType": "AVMString",
                    "valueType": "(address,(address,uint64)[])[]",
                    "key": "YWxsb3dhbmNlcw=="
                },
                "minters": {
                    "keyType": "AVMString",
                    "valueType": "address[]",
                    "key": "bWludGVycw=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        605
                    ],
                    "errorMessage": "Burn amount exceeds allowance"
                },
                {
                    "pc": [
                        505,
                        799,
                        845
                    ],
                    "errorMessage": "Caller is not a minter"
                },
                {
                    "pc": [
                        849
                    ],
                    "errorMessage": "Cannot remove self"
                },
                {
                    "pc": [
                        521
                    ],
                    "errorMessage": "Cap exceeded"
                },
                {
                    "pc": [
                        109
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        240
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "Only deployer can create ASA"
                },
                {
                    "pc": [
                        454
                    ],
                    "errorMessage": "Only deployer can set asset"
                },
                {
                    "pc": [
                        986
                    ],
                    "errorMessage": "Only deployer can set reserve"
                },
                {
                    "pc": [
                        688
                    ],
                    "errorMessage": "Transfer amount exceeds allowance"
                },
                {
                    "pc": [
                        1180,
                        1199,
                        1268,
                        1415,
                        1649,
                        1664,
                        1725
                    ],
                    "errorMessage": "check self.allowances exists"
                },
                {
                    "pc": [
                        532,
                        1012,
                        1047
                    ],
                    "errorMessage": "check self.asset_id exists"
                },
                {
                    "pc": [
                        517,
                        964
                    ],
                    "errorMessage": "check self.cap exists"
                },
                {
                    "pc": [
                        809,
                        859,
                        1784
                    ],
                    "errorMessage": "check self.minters exists"
                },
                {
                    "pc": [
                        536,
                        1016
                    ],
                    "errorMessage": "check self.reserve_addr exists"
                },
                {
                    "pc": [
                        509,
                        951,
                        998
                    ],
                    "errorMessage": "check self.total_supply exists"
                },
                {
                    "pc": [
                        880,
                        1114,
                        1140,
                        1229,
                        1278,
                        1607,
                        1694,
                        1741,
                        1806
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        248,
                        264,
                        861,
                        1089,
                        1182,
                        1206,
                        1271,
                        1585,
                        1651,
                        1671,
                        1732,
                        1786
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        255,
                        271
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        302,
                        448,
                        489,
                        583,
                        631,
                        658,
                        666,
                        714,
                        741,
                        749,
                        767,
                        793,
                        839,
                        930,
                        980
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        283,
                        293,
                        439,
                        498,
                        566,
                        592,
                        640,
                        675,
                        723
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        91,
                        813,
                        895,
                        1163
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}